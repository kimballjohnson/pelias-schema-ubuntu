{
  "name": "elastictest",
  "version": "1.2.0",
  "description": "A simple test harness for elasticsearch functional testing",
  "main": "index.js",
  "scripts": {
    "test": "node test/run.js | tap-spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/missinglink/elastictest"
  },
  "keywords": [
    "elasticsearch",
    "test",
    "functional"
  ],
  "author": {
    "name": "missinglink"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/missinglink/elastictest/issues"
  },
  "homepage": "https://github.com/missinglink/elastictest",
  "devDependencies": {
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1"
  },
  "dependencies": {
    "async": "^1.5.2",
    "elasticsearch": "^10.1.3",
    "randomstring": "^1.1.4"
  },
  "readme": "A simple test harness for elasticsearch functional testing\n\n### Install\n\n```bash\nnpm install elastictest --save\n```\n\n[![NPM](https://nodei.co/npm/elastictest.png?downloads=true&stars=true)](https://nodei.co/npm/elastictest/)\n\n### Example Script\n\n```javascript\nvar suite = new elastictest.Suite();\n\nvar doc = {\n  index: suite.props.index,\n  type: 'mytype',\n  id: '1',\n  body: {\n    foo: 'bar'\n  }\n};\n\nsuite.action( function( done ){\n  suite.client.index( doc, done );\n});\n\nsuite.assert( function( done ){\n  suite.client.count({\n    index: doc.index,\n    type: doc.type\n  }, function( err, res ){\n    t.equal( res.count, 1, 'record count' );\n    done();\n  });\n});\n\nsuite.run();\n```\n\n### Usage\n\n#### Create a new test suite\n\n```javascript\nvar suite = new elastictest.Suite();\n```\n\n#### Perform an 'action' on the database before running assertions\n\n`suite.client` is an instance of the elasticsearch javascript client, so you can do anything that is [supported by that API](http://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html).\n\nYou **must** call `done()` when your async operations are complete. You may add as many `suite.action` sections as you wish per suite.\n\n**note** the test suite will handle refreshing your index so that the data is up-to-date before the assert operations are run.\n\n```javascript\nsuite.action( function( done ){\n  suite.client.index( {}, done );\n});\n```\n\n#### Run an 'assert' on the database to test if the actions were successful\n\n`suite.assert` allows you to run assertion code against the responses from `suite.client` calls to the database. You can use whatever assertion library you wish as long as it handles the exception catching. In the example below I am using `t.equals` from `npm tape`. A full example can be found in `./test`.\n\nYou **must** call `done()` when your async operations are complete. You may add as many `suite.assert` sections as you wish per suite.\n\n```javascript\nsuite.assert( function( done ){\n  suite.client.count({\n    index: doc.index,\n    type: doc.type\n  }, function( err, res ){\n    t.equal( res.count, 1, 'record count' );\n    done();\n  });\n});\n```\n\n#### Run the suite\n\nYou may provide an `optional_callback` function to run once the suite is complete. This is useful for alerting your testing framework that work is done for this unit of work.\n\n```javascript\nsuite.run( optional_callback );\n```\n\n#### Use a custom schema when creating your test index\n\nYou may provide a `schema` property when creating your Suite, this will be used whenever creating new indeces.\n\n```javascript\nvar suite = new elastictest.Suite( null, { schema: custom_schema });\n```\n\n---\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Peter Johnson &lt;@insertcoffee&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "elastictest@1.2.0",
  "dist": {
    "shasum": "f0ef0bf730623e4af1596f0b08de38d9e9bb9db4"
  },
  "_from": "elastictest@^1.2.0",
  "_resolved": "https://registry.npmjs.org/elastictest/-/elastictest-1.2.0.tgz"
}
